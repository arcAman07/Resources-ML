# -*- coding: utf-8 -*-
"""image-stitching.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/kornia/tutorials/blob/master/source/image_stitching.ipynb

[![Open in Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.sandbox.google.com/github/kornia/tutorials/blob/master/source/image_stitching.ipynb)

# Image stitching example with LoFTR

First, we will install everything needed:



*  fresh version of [kornia](https://github.com/kornia/kornia) for [LoFTR](https://zju3dv.github.io/loftr/)
*  fresh version of [kornia](https://github.com/kornia/kornia) for [ImageStitcher](https://kornia.readthedocs.io/en/latest/contrib.html#kornia.contrib.ImageStitcher)
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install kornia scikit-image

"""Now let's download an image pair

"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# import matplotlib.pyplot as plt
# import numpy as np
# from skimage import io
# 
# import torch
# import kornia as K
# import kornia.feature as KF
# 
# 
# def load_torch_image(fname):
#     return K.image_to_tensor(io.imread(fname), False).float() / 255.
# 
# def load_images_by_link(links):
#     return list([load_torch_image(fname) for fname in links])
# 
# fnames = [
#     'http://www.ic.unicamp.br/~helio/imagens_registro/foto1B.jpg',
#     'http://www.ic.unicamp.br/~helio/imagens_registro/foto1A.jpg',
# ]
# 
# imgs = load_images_by_link(fnames)

"""## Stitch them together"""

from kornia.contrib import ImageStitcher

IS = ImageStitcher(KF.LoFTR(pretrained='outdoor'), estimator='ransac')

with torch.no_grad():
    out = IS(*imgs)

plt.imshow(K.tensor_to_image(out))
plt.show()

"""## Another example"""

fnames = [
    'https://github.com/daeyun/Image-Stitching/blob/master/img/hill/1.JPG?raw=true',
    'https://github.com/daeyun/Image-Stitching/blob/master/img/hill/2.JPG?raw=true',
    'https://github.com/daeyun/Image-Stitching/blob/master/img/hill/3.JPG?raw=true',
]

imgs = load_images_by_link(fnames)

f, axarr = plt.subplots(1, 3, figsize = (16,6))

axarr[0].imshow(K.tensor_to_image(imgs[0]))
axarr[0].tick_params(left = False, right = False, labelleft = False, labelbottom = False, bottom = False)
axarr[1].imshow(K.tensor_to_image(imgs[1]))
axarr[1].tick_params(left = False, right = False, labelleft = False, labelbottom = False, bottom = False)
axarr[2].imshow(K.tensor_to_image(imgs[2]))
axarr[2].tick_params(left = False, right = False, labelleft = False, labelbottom = False, bottom = False)

matcher = KF.LocalFeatureMatcher(
    KF.GFTTAffNetHardNet(100), KF.DescriptorMatcher('snn', 0.8)
)
IS = ImageStitcher(matcher, estimator='ransac')

with torch.no_grad():
    out = IS(*imgs)

plt.figure(figsize=(16, 16))
plt.imshow(K.tensor_to_image(out))